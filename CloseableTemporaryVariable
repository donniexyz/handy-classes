package com.samaicita.point.lombok;

import lombok.Getter;

import java.util.function.Consumer;

/**
 * Extending lombok @Cleanup annotation to store a variable and pass it to consumer function upon returning.
 * <p>
 * How to use:</p>
 *   1. Example:
 *  <pre>
 *         &#64;Cleanup val tmp = new CloseableTemporaryVariable<>(trxGroup.getChild(), trxGroup::setChild);
 *         trxGroup.setChild(null);
 *  </pre>
 *     Generated java:
 *  <pre>
 *          final CloseableTemporaryVariable<List> tmp = new CloseableTemporaryVariable<>(trxGroup.getChild(), trxGroup::setChild);
 *          // meaning temporaryVariable.data = trxGroup.getChild()
 *
 *          try {
 *              trxGroup.setChild(null);
 *              ...
 *          } finally {
 *              if (tmp != null)
 *                  tmp.close();  // meaning trxGroup.setChild(tmp.data)
 *          }
 *  </pre>
 *   2. Example:
 *  <pre>
 *         &#64;Cleanup val tmp = new CloseableTemporaryVariable<>(() -> trxGroup.add("completed)");
 *  </pre>
 *     Generated java:
 *  <pre>
 *          final CloseableTemporaryVariable<List> tmp = new CloseableTemporaryVariable<>(() -> trxGroup.add("completed)");
 *
 *          try {
 *              ...
 *          } finally {
 *              if (tmp != null)
 *                  tmp.close();  // meaning trxGroup.add("completed)")
 *          }
 * </pre>
 * @param <T>
 */
@Getter
public class CloseableTemporaryVariable<T> {

    private final T data;
    private final Consumer<T> consumer;
    private final Runnable runnable;

    public CloseableTemporaryVariable(Runnable runnable) {
        this.data = null;
        this.consumer = null;
        this.runnable = runnable;
    }

    public CloseableTemporaryVariable(T data, Consumer<T> consumer) {
        this.data = data;
        this.consumer = consumer;
        this.runnable = null;
    }

    @SuppressWarnings("unused")
    public void close() {
        if (null != consumer) consumer.accept(data);
        else if (null != runnable) runnable.run();
    }
}

